=============================================================================================================

This file contains answers to conceptual problems.

=============================================================================================================


1. Jelaskan apa yang dimaksud dengan NoSQL menggunakan pemahaman yang kalian ketahui !

    NoSQL, short for "Not Only SQL," is a type of database design that provides flexible ways to store, manage, and retrieve data, different from the traditional relational database management systems (RDBMS). 
    Unlike RDBMS, which use tables to organize data and SQL for accessing it, NoSQL databases can store data in various formats like key-value pairs, document-oriented structures, wide-column stores, or graphs. 
    This flexibility makes them ideal for handling large volumes of unstructured or semi-structured data and for applications requiring quick data operations and scalability. NoSQL databases are popular in big-
    data and real-time web applications because they can easily handle a variety of data types and are built to scale out by distributing the data across multiple servers.


2. Jelaskan kapan harus menggunakan NoSQL dan Relational Database Management System !
    
    When deciding between using a NoSQL database and a Relational Database Management System (RDBMS), it's important to consider the nature of your data and your specific needs. Use a NoSQL database when dealing with 
    large volumes of data that doesn't fit neatly into tables, is rapidly changing, or requires flexible schema for unstructured data, like JSON documents. This is typical in big data applications and real-time web apps. 
    On the other hand, choose a Relational Database Management System when you need to ensure data integrity and ACID (Atomicity, Consistency, Isolation, Durability) compliance, especially for complex queries and reports. 
    RDBMS is ideal for applications requiring structured data and clear relationships between different data entities, such as in banking systems or customer relationship management software.

3. Sebutkan contoh 2 tools/platform NoSQL selain ElasticSearch beserta keunggulan tools/platform tersebut !
    
    Two examples of NoSQL tools/platforms besides Elasticsearch are MongoDB and Apache Cassandra.
    
    - MongoDB is a document-oriented NoSQL database that offers high performance, high availability, and easy scalability. It stores data in flexible, JSON-like documents, which means fields can vary from document to-
    document and data structure can be changed over time. This flexibility allows you to store data in a way that aligns with how your applications and services work. MongoDB also provides powerful query language and 
    indexing capabilities that allow you to easily query and analyze your data.

    - Apache Cassandra is a distributed NoSQL database known for its outstanding scalability and high availability without compromising performance. It's particularly well-suited for handling large amounts of data across 
    many commodity servers. Cassandra offers robust support for clusters spanning multiple datacenters, with asynchronous masterless replication allowing low latency operations for all clients. This makes it an excellent 
    choice for applications that can't afford to lose data, even when an entire data center goes down.

4. Jelaskan apa yang Anda ketahui dari Airflow menggunakan pemahaman dan bahasa Anda sendiri !

    Apache Airflow is an open-source tool designed for orchestrating complex computational workflows and data processing pipelines. It allows you to plan, organize, and manage tasks effectively. In Airflow, a workflow is 
    structured as a set of tasks, represented by a Directed Acyclic Graph (DAG). This means the tasks are arranged in a way where each task follows another in a specific order without looping back. Airflow is especially 
    useful in automating scripts or procedures that need to run at certain times or in a particular sequence, making it highly valuable in handling batch processing or big data tasks. It's like having a personal assistant 
    that ensures all your data tasks are carried out smoothly and in the right order.

5. Jelaskan apa yang Anda ketahui dari Great Expectations menggunakan pemahaman dan bahasa Anda sendiri !

    Great Expectations in the context of data validation refers to a modern, open-source tool designed to simplify and enhance the process of validating, documenting, and profiling your data to ensure it meets certain 
    quality standards. It helps to check if the data looks right and adheres to the rules and expectations you set. This tool allows you to define 'expectations' or rules for your data, such as ensuring certain columns 
    in a dataset always contain numbers, or that the values in a specific column are never empty. Once these expectations are set, Great Expectations can automatically validate new data against them, providing a clear 
    report on how well the new data meets your standards. This not only helps in maintaining the quality and consistency of the data but also significantly reduces the risk of errors and issues in data-driven decision-
    making processes.

6. Jelaskan apa yang Anda ketahui dari Batch Processing menggunakan pemahaman dan bahasa Anda sendiri (Definisi, Contoh Kasus Penggunaan, Tools, dll) !

    Batch processing is a method where tasks or data are processed in large groups, or "batches", without needing user interaction for each task. This approach is especially useful when dealing with large volumes of similar 
    tasks or data, making it more efficient than processing each item individually. 
    
    For example, banks often use batch processing for transactions made throughout the day, processing them all at once during off-peak hours. This not only saves time but also resources. Tools commonly used for batch processing 
    include SQL for database operations, scripting languages like Python for automating tasks, and specialized software like Apache Hadoop for handling big data. Batch processing is ideal for tasks that aren't time-sensitive and 
    can be delayed until a batch is ready to be processed, which contrasts with real-time processing where tasks are handled immediately.